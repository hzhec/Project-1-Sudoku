let selectedNum = "";
let loadedBoard = [];
// let completedBoard = [
// 	3, 7, 8, 4, 1, 5, 2, 6, 9, 5, 6, 1, 9, 2, 8, 4, 7, 3, 4, 2, 9, 7, 6, 3, 5, 8,
// 	1, 7, 4, 5, 3, 9, 6, 8, 1, 2, 8, 3, 2, 1, 5, 7, 6, 9, 4, 1, 9, 6, 2, 8, 4, 3,
// 	5, 7, 9, 8, 4, 6, 7, 2, 1, 3, 5, 2, 5, 7, 8, 3, 1, 9, 4, 6, 6, 1, 3, 5, 4, 9,
// 	7, 2, 8,
// ];

// Taking reference from https://lisperator.net/blog/javascript-sudoku-solver/
// Convert index of a value in an array to row and column
const indexToRowCol = (index) => {
	return { row: Math.floor(index / 9), col: index % 9 };
};

// Convert value with row and column to its index of an array
const rowColToIndex = (row, col) => {
	return row * 9 + col;
};

const checkDuplicates = (array, index, value) => {
	let valuePosition = indexToRowCol(index);
	// console.log(valuePosition);
	let valueToString = value.toString();

	// Check if the number duplicated in the same row
	for (let col = 0; col < 9; col++) {
		if (valuePosition.col !== col) {
			if (array[rowColToIndex(valuePosition.row, col)] === valueToString) {
				return false;
			}
		}
	}

	// Check if the number duplicated in the same col
	for (let row = 0; row < 9; row++) {
		if (valuePosition.row !== row) {
			if (array[rowColToIndex(row, valuePosition.col)] === valueToString) {
				return false;
			}
		}
	}

	// Check if the number duplicated in 3x3 box
	let boxRow = Math.floor(valuePosition.row / 3) * 3;
	let boxCol = Math.floor(valuePosition.col / 3) * 3;
	for (let row = boxRow; row < boxRow + 3; row++) {
		for (let col = boxCol; col < boxCol + 3; col++) {
			if (valuePosition.row !== row && valuePosition.col !== col) {
				if (array[rowColToIndex(row, col)] === valueToString) {
					return false;
				}
			}
		}
	}

	// If no duplicates found, return true.
	return true;
};

const solve = (array) => {
	const squares = document.querySelectorAll(".square");
	for (let i = 0; i < 81; i++) {
		let value = array[i];
		if (checkDuplicates(array, i, value)) {
			if (squares[i].classList.contains("active")) {
				squares[i].classList.add("passed");
			}
		} else if (squares[i].classList.contains("active")) {
			squares[i].innerText = "";
		}
	}
};

// Create a 9x9 board
for (let i = 0; i < 81; i++) {
	const square = document.createElement("div");
	let col = i % 9;
	let row = Math.floor(i / 9);
	square.classList.add("square", "row" + row, "col" + col);
	square.setAttribute("row", row);
	square.setAttribute("col", col);

	//
	if (
		((col === 0 ||
			col === 1 ||
			col === 2 ||
			col === 6 ||
			col === 7 ||
			col === 8) &&
			(row === 0 ||
				row === 1 ||
				row === 2 ||
				row === 6 ||
				row === 7 ||
				row === 8)) ||
		((col === 3 || col === 4 || col === 5) &&
			(row === 3 || row === 4 || row === 5))
	) {
		square.classList.add("odd-box");
	} else {
		square.classList.add("even-box");
	}

	document.querySelector(".game-box").appendChild(square);
}

// Initialise sudoku board. Generated by sudoku app.
let sudokuBoard = {
	0: [
		8, 9, 4, 0, 0, 0, 0, 5, 1, 0, 0, 7, 0, 0, 3, 0, 6, 9, 0, 6, 0, 5, 0, 4, 0,
		0, 0, 0, 3, 8, 4, 5, 1, 0, 0, 0, 2, 0, 0, 0, 0, 6, 8, 0, 5, 6, 0, 0, 0, 0,
		2, 7, 0, 0, 3, 8, 0, 1, 7, 5, 0, 0, 0, 4, 0, 0, 3, 6, 9, 1, 0, 8, 0, 1, 0,
		0, 0, 0, 5, 7, 0,
	],
	1: [
		3, 7, 8, 4, 1, 0, 2, 0, 0, 5, 6, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0,
		0, 1, 0, 0, 0, 3, 0, 0, 8, 0, 0, 0, 3, 2, 1, 0, 0, 6, 9, 0, 0, 0, 6, 2, 8,
		4, 3, 5, 7, 0, 0, 4, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 3, 1, 9, 4, 6, 6, 1, 0,
		0, 0, 0, 7, 0, 8,
	],
};

// Create number 1 - 9 for input purpose
const numberBox = document.querySelectorAll(".number-selector");
let activeBtn = null;
numberBox.forEach((element) =>
	element.addEventListener("click", (event) => {
		const messageBox = document.querySelector(".message-box");
		let num = event.target.innerText;

		event.target.classList.add("selected");
		// console.log(event.target);
		// console.log(event.currentTarget);

		if (num === "Clear") {
			selectedNum = "";
			messageBox.innerText = `Select a box to clear the number`;
		} else {
			messageBox.innerHTML = `Selected number:<br> <span>${num}</span>`;
			selectedNum = num;
			// console.log(num); // string type
			// console.log(typeof event.target.innerText);
		}

		// Reference taken from https://dev.to/oliwier965/multiple-buttons-only-one-active-on-click-50on
		if (activeBtn === null) {
			activeBtn = event.target;
		} else if (activeBtn !== event.target) {
			activeBtn.classList.remove("selected");
			activeBtn = event.target;
		}

		// console.log(activeBtn);
	})
);

const randomBoard = () => {
	const randomIndex = parseInt(
		Math.floor(Math.random() * Object.keys(sudokuBoard).length)
	);
	// Clone array to loadedBoard
	return (loadedBoard = [...sudokuBoard[randomIndex]]);
};

const generateSudoku = (array) => {
	const squares = document.querySelectorAll(".square");
	// Generate random number to load the sudoku puzzle randomly
	for (let i = 0; i < 81; i++) {
		let num = array[i];
		squares[i].innerText = "";
		if (squares[i].classList.contains("passed")) {
			squares[i].classList.remove("passed");
		}
		if (num !== 0) {
			if (squares[i].classList.contains("active")) {
				squares[i].classList.remove("active");
			}
			squares[i].innerText = num;
		} else {
			squares[i].classList.add("active");
			squares[i].addEventListener("click", (event) => {
				event.currentTarget.innerText = selectedNum;
			});
		}
	}
};

const newGame = document.querySelector(".new-game");
newGame.addEventListener("click", () => {
	document.querySelector(".text-box").style.display = "flex";
	document.querySelector(".number-box").style.display = "flex";
	generateSudoku(randomBoard());
});

const submitGame = document.querySelector(".submit");
submitGame.addEventListener("click", () => {
	const squares = document.querySelectorAll(".square");
	const array = [];
	squares.forEach((element) => {
		array.push(element.innerText);
	});
	if (array.includes("")) {
		alert("Please complete!");
	} else {
		solve(array);
	}
});

const resetBoard = document.querySelector(".reset-btn");
resetBoard.addEventListener("click", () => {
	generateSudoku(loadedBoard);
});
